"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/uploadthing";
exports.ids = ["vendor-chunks/uploadthing"];
exports.modules = {

/***/ "(rsc)/./node_modules/uploadthing/dist/next.mjs":
/*!************************************************!*\
  !*** ./node_modules/uploadthing/dist/next.mjs ***!
  \************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createNextRouteHandler: () => (/* binding */ createNextRouteHandler),\n/* harmony export */   createUploadthing: () => (/* binding */ createUploadthing)\n/* harmony export */ });\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @uploadthing/shared */ \"(rsc)/./node_modules/@uploadthing/shared/dist/index.mjs\");\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __commonJS = (cb, mod)=>function __require() {\n        return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {\n            exports: {}\n        }).exports, mod), mod.exports;\n    };\n// package.json\nvar require_package = __commonJS({\n    \"package.json\" (exports, module) {\n        module.exports = {\n            name: \"uploadthing\",\n            version: \"4.1.3\",\n            license: \"MIT\",\n            exports: {\n                \"./package.json\": \"./package.json\",\n                \"./client\": {\n                    import: \"./dist/client.mjs\",\n                    types: \"./dist/client.d.ts\"\n                },\n                \"./server\": {\n                    import: \"./dist/server.mjs\",\n                    types: \"./dist/server.d.ts\",\n                    default: \"./dist/server.mjs\"\n                },\n                \"./next\": {\n                    import: \"./dist/next.mjs\",\n                    types: \"./dist/next.d.ts\"\n                },\n                \"./next-legacy\": {\n                    import: \"./dist/next-legacy.mjs\",\n                    types: \"./dist/next-legacy.d.ts\"\n                }\n            },\n            files: [\n                \"dist\"\n            ],\n            typesVersions: {\n                \"*\": {\n                    \"*\": [\n                        \"dist/*\"\n                    ]\n                }\n            },\n            scripts: {\n                lint: 'eslint \"**/*.{ts,tsx}\" --max-warnings 0',\n                build: \"tsup\",\n                clean: \"git clean -xdf dist node_modules\",\n                dev: \"tsup --watch\",\n                test: \"vitest run\",\n                \"test:watch\": \"vitest\",\n                typecheck: \"tsc --noEmit\"\n            },\n            dependencies: {\n                \"@uploadthing/mime-types\": \"^0.2.0\",\n                \"@uploadthing/shared\": \"^5.0.0\"\n            },\n            devDependencies: {\n                \"@uploadthing/eslint-config\": \"0.1.0\",\n                \"@uploadthing/tsconfig\": \"0.1.0\",\n                \"@uploadthing/tsup-config\": \"0.1.0\",\n                eslint: \"^8.42.0\",\n                next: \"13.4.4\",\n                tsup: \"6.7.0\",\n                \"type-fest\": \"^3.11.1\",\n                typescript: \"5.1.3\",\n                vitest: \"^0.30.1\"\n            },\n            publishConfig: {\n                access: \"public\"\n            }\n        };\n    }\n});\n// src/upload-builder.ts\nfunction internalCreateBuilder(initDef = {}) {\n    const _def = {\n        // Default router config\n        routerConfig: {\n            image: {\n                maxFileSize: \"4MB\"\n            }\n        },\n        middleware: ()=>({}),\n        // Overload with properties passed in\n        ...initDef\n    };\n    return {\n        middleware (userMiddleware) {\n            return internalCreateBuilder({\n                ..._def,\n                middleware: userMiddleware\n            });\n        },\n        onUploadComplete (userUploadComplete) {\n            return {\n                _def,\n                resolver: userUploadComplete\n            };\n        }\n    };\n}\nfunction createBuilder() {\n    return (input)=>{\n        return internalCreateBuilder({\n            routerConfig: input\n        });\n    };\n}\n// src/constants.ts\nvar packageJson = require_package();\nif (!packageJson.version) throw new Error(\"no version found in package.json\");\nvar UPLOADTHING_VERSION = packageJson.version;\n// src/internal/handler.ts\n\nvar fileCountLimitHit = (files, routeConfig)=>{\n    const counts = {};\n    files.forEach((file)=>{\n        const type = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.getTypeFromFileName)(file, Object.keys(routeConfig));\n        if (!counts[type]) {\n            counts[type] = 1;\n        } else {\n            counts[type] += 1;\n        }\n    });\n    return Object.keys(counts).some((key)=>{\n        var _a;\n        const count = counts[key];\n        if (count === 0) return false;\n        const limit = (_a = routeConfig[key]) == null ? void 0 : _a.maxFileCount;\n        if (!limit) {\n            console.error(routeConfig, key);\n            throw new Error(\"invalid config during file count\");\n        }\n        return count > limit;\n    });\n};\nif (true) {\n    console.log(\"[UT] UploadThing dev server is now running!\");\n}\nvar isValidResponse = (response)=>{\n    if (!response.ok) return false;\n    if (response.status >= 400) return false;\n    if (!response.headers.has(\"x-uploadthing-version\")) return false;\n    return true;\n};\nvar conditionalDevServer = async (fileKey)=>{\n    if (false) {}\n    const fileData = await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.pollForFileData)(fileKey, async (json)=>{\n        const file = json.fileData;\n        let callbackUrl = file.callbackUrl + `?slug=${file.callbackSlug}`;\n        if (!callbackUrl.startsWith(\"http\")) callbackUrl = \"http://\" + callbackUrl;\n        console.log(\"[UT] SIMULATING FILE UPLOAD WEBHOOK CALLBACK\", callbackUrl);\n        const response = await fetch(callbackUrl, {\n            method: \"POST\",\n            body: JSON.stringify({\n                status: \"uploaded\",\n                metadata: JSON.parse(file.metadata ?? \"{}\"),\n                file: {\n                    url: `https://uploadthing.com/f/${encodeURIComponent(fileKey ?? \"\")}`,\n                    key: fileKey ?? \"\",\n                    name: file.fileName\n                }\n            }),\n            headers: {\n                \"uploadthing-hook\": \"callback\"\n            }\n        });\n        if (isValidResponse(response)) {\n            console.log(\"[UT] Successfully simulated callback for file\", fileKey);\n        } else {\n            console.error(\"[UT] Failed to simulate callback for file. Is your webhook configured correctly?\", fileKey);\n        }\n        return file;\n    });\n    if (fileData !== null) return fileData;\n    console.error(`[UT] Failed to simulate callback for file ${fileKey}`);\n    throw new Error(\"File took too long to upload\");\n};\nvar buildRequestHandler = (opts)=>{\n    return async (input)=>{\n        const { router, config } = opts;\n        const preferredOrEnvSecret = (config == null ? void 0 : config.uploadthingSecret) ?? process.env.UPLOADTHING_SECRET;\n        const { uploadthingHook, slug, req, res, actionType } = input;\n        if (!slug) throw new Error(\"we need a slug\");\n        if (!preferredOrEnvSecret) {\n            throw new Error(`Please set your preferred secret in ${slug} router's config or set UPLOADTHING_SECRET in your env file`);\n        }\n        const uploadable = router[slug];\n        if (!uploadable) {\n            return {\n                status: 404\n            };\n        }\n        const reqBody = await req.json();\n        if (uploadthingHook && uploadthingHook === \"callback\") {\n            await uploadable.resolver({\n                file: reqBody.file,\n                metadata: reqBody.metadata\n            });\n            return {\n                status: 200\n            };\n        }\n        if (!actionType || actionType !== \"upload\") {\n            return {\n                status: 404\n            };\n        }\n        try {\n            const { files } = reqBody;\n            const metadata = await uploadable._def.middleware(req, res);\n            if (!Array.isArray(files) || !files.every((f)=>typeof f === \"string\")) throw new Error(\"Need file array\");\n            const parsedConfig = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fillInputRouteConfig)(uploadable._def.routerConfig);\n            const limitHit = fileCountLimitHit(files, parsedConfig);\n            if (limitHit) throw new Error(\"Too many files\");\n            const uploadthingApiResponse = await fetch((0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.generateUploadThingURL)(\"/api/prepareUpload\"), {\n                method: \"POST\",\n                body: JSON.stringify({\n                    files,\n                    routeConfig: parsedConfig,\n                    metadata,\n                    callbackUrl: (config == null ? void 0 : config.callbackUrl) ?? (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.getUploadthingUrl)(),\n                    callbackSlug: slug\n                }),\n                headers: {\n                    \"Content-Type\": \"application/json\",\n                    \"x-uploadthing-api-key\": preferredOrEnvSecret,\n                    \"x-uploadthing-version\": UPLOADTHING_VERSION\n                }\n            });\n            if (!uploadthingApiResponse.ok) {\n                console.error(\"[UT] unable to get presigned urls\");\n                try {\n                    const error = await uploadthingApiResponse.json();\n                    console.error(error);\n                } catch (e) {\n                    console.error(\"[UT] unable to parse response\");\n                }\n                throw new Error(\"ending upload\");\n            }\n            const parsedResponse = await uploadthingApiResponse.json();\n            if (true) {\n                for (const file of parsedResponse){\n                    void conditionalDevServer(file.key);\n                }\n            }\n            return {\n                body: parsedResponse,\n                status: 200\n            };\n        } catch (e) {\n            console.error(\"[UT] middleware failed to run\");\n            console.error(e);\n            return {\n                status: 400,\n                message: e.toString()\n            };\n        }\n    };\n};\nvar buildPermissionsInfoHandler = (opts)=>{\n    return ()=>{\n        const r = opts.router;\n        const permissions = Object.keys(r).map((k)=>{\n            const route = r[k];\n            const config = (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.fillInputRouteConfig)(route._def.routerConfig);\n            return {\n                slug: k,\n                config\n            };\n        });\n        return permissions;\n    };\n};\n// src/next/core/approuter.ts\nvar createNextRouteHandler = (opts)=>{\n    const requestHandler = buildRequestHandler(opts);\n    const POST = async (req)=>{\n        const params = new URL(req.url).searchParams;\n        const uploadthingHook = req.headers.get(\"uploadthing-hook\") ?? void 0;\n        const slug = params.get(\"slug\") ?? void 0;\n        const actionType = params.get(\"actionType\") ?? void 0;\n        const response = await requestHandler({\n            uploadthingHook,\n            slug,\n            actionType,\n            req\n        });\n        if (response.status === 200) {\n            return new Response(JSON.stringify(response.body), {\n                status: response.status,\n                headers: {\n                    \"x-uploadthing-version\": UPLOADTHING_VERSION\n                }\n            });\n        }\n        return new Response(response.message ?? \"Unable to upload file.\", {\n            status: response.status,\n            headers: {\n                \"x-uploadthing-version\": UPLOADTHING_VERSION\n            }\n        });\n    };\n    const getBuildPerms = buildPermissionsInfoHandler(opts);\n    const GET = ()=>{\n        return new Response(JSON.stringify(getBuildPerms()), {\n            status: 200,\n            headers: {\n                \"x-uploadthing-version\": UPLOADTHING_VERSION\n            }\n        });\n    };\n    return {\n        GET,\n        POST\n    };\n};\n// next.ts\nvar createUploadthing = ()=>createBuilder();\n //# sourceMappingURL=next.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/./node_modules/uploadthing/dist/next.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/uploadthing/dist/client.mjs":
/*!**************************************************!*\
  !*** ./node_modules/uploadthing/dist/client.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DANGEROUS__uploadFiles: () => (/* binding */ DANGEROUS__uploadFiles),\n/* harmony export */   classNames: () => (/* binding */ classNames),\n/* harmony export */   genUploader: () => (/* binding */ genUploader),\n/* harmony export */   generateClientDropzoneAccept: () => (/* binding */ generateClientDropzoneAccept),\n/* harmony export */   generateMimeTypes: () => (/* binding */ generateMimeTypes)\n/* harmony export */ });\n/* harmony import */ var _uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @uploadthing/shared */ \"(ssr)/./node_modules/@uploadthing/shared/dist/index.mjs\");\n// client.ts\n\nvar createRequestPermsUrl = (config) => {\n  const queryParams = `?actionType=upload&slug=${config.slug}`;\n  return `${(config == null ? void 0 : config.url) ?? \"/api/uploadthing\"}${queryParams}`;\n};\nvar DANGEROUS__uploadFiles = async (files, endpoint, config) => {\n  const s3ConnectionRes = await fetch(\n    createRequestPermsUrl({ url: config == null ? void 0 : config.url, slug: endpoint }),\n    {\n      method: \"POST\",\n      body: JSON.stringify({\n        files: files.map((f) => f.name)\n      })\n    }\n  ).then((res) => {\n    if (!res.ok)\n      throw new Error(\"Failed to get presigned URLs\");\n    try {\n      return res.json();\n    } catch (e) {\n      console.error(e);\n      throw new Error(`Failed to parse response as JSON. Got: ${res.body}`);\n    }\n  });\n  if (!s3ConnectionRes || !Array.isArray(s3ConnectionRes))\n    throw \"No url received. How did you get here?\";\n  const fileUploadPromises = s3ConnectionRes.map(async (presigned) => {\n    const file = files.find((f) => f.name === presigned.name);\n    if (!file) {\n      console.error(\"No file found for presigned URL\", presigned);\n      throw new Error(\"No file found for presigned URL\");\n    }\n    const { url, fields } = presigned.presignedUrl;\n    const formData = new FormData();\n    if (presigned.fileType === file.type.split(\"/\")[0] || presigned.fileType === file.type) {\n      formData.append(\"Content-Type\", file.type);\n    } else if (presigned.fileType === \"blob\") {\n      formData.append(\"Content-Type\", \"application/octet-stream\");\n    } else if (presigned.fileType === \"pdf\") {\n      formData.append(\"Content-Type\", \"application/pdf\");\n    }\n    Object.entries({ ...fields, file }).forEach(([key, value]) => {\n      formData.append(key, value);\n    });\n    const upload = await fetch(url, {\n      method: \"POST\",\n      body: formData,\n      headers: new Headers({\n        Accept: \"application/xml\"\n      })\n    });\n    if (!upload.ok)\n      throw new Error(\"Upload failed.\");\n    const genUrl = \"https://uploadthing.com/f/\" + encodeURIComponent(fields[\"key\"]);\n    await (0,_uploadthing_shared__WEBPACK_IMPORTED_MODULE_0__.pollForFileData)(presigned.key);\n    return {\n      fileKey: presigned.key,\n      fileUrl: genUrl\n    };\n  });\n  return Promise.all(fileUploadPromises);\n};\nvar genUploader = () => {\n  return DANGEROUS__uploadFiles;\n};\nvar classNames = (...classes) => {\n  return classes.filter(Boolean).join(\" \");\n};\nvar generateMimeTypes = (fileTypes) => {\n  const accepted = fileTypes.map((type) => {\n    if (type === \"blob\")\n      return \"blob\";\n    if (type === \"pdf\")\n      return \"application/pdf\";\n    else\n      return `${type}/*`;\n  });\n  if (accepted.includes(\"blob\")) {\n    return void 0;\n  }\n  return accepted;\n};\nvar generateClientDropzoneAccept = (fileTypes) => {\n  const mimeTypes = generateMimeTypes(fileTypes);\n  if (!mimeTypes)\n    return void 0;\n  return Object.fromEntries(mimeTypes.map((type) => [type, []]));\n};\n\n//# sourceMappingURL=client.mjs.map//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jbGllbnQubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztBQUFBO0FBQ3NEO0FBQ3REO0FBQ0EsaURBQWlELFlBQVk7QUFDN0QsWUFBWSw2REFBNkQsRUFBRSxZQUFZO0FBQ3ZGO0FBQ0E7QUFDQTtBQUNBLDRCQUE0QiwyREFBMkQ7QUFDdkY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPO0FBQ1A7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0EsZ0VBQWdFLFNBQVM7QUFDekU7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQVksY0FBYztBQUMxQjtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBLHFCQUFxQixpQkFBaUI7QUFDdEM7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUCxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsVUFBVSxvRUFBZTtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsS0FBSztBQUNyQixHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQU9FO0FBQ0YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9yZWRkaXQtY2xvbmUvLi9ub2RlX21vZHVsZXMvdXBsb2FkdGhpbmcvZGlzdC9jbGllbnQubWpzP2E4MjMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gY2xpZW50LnRzXG5pbXBvcnQgeyBwb2xsRm9yRmlsZURhdGEgfSBmcm9tIFwiQHVwbG9hZHRoaW5nL3NoYXJlZFwiO1xudmFyIGNyZWF0ZVJlcXVlc3RQZXJtc1VybCA9IChjb25maWcpID0+IHtcbiAgY29uc3QgcXVlcnlQYXJhbXMgPSBgP2FjdGlvblR5cGU9dXBsb2FkJnNsdWc9JHtjb25maWcuc2x1Z31gO1xuICByZXR1cm4gYCR7KGNvbmZpZyA9PSBudWxsID8gdm9pZCAwIDogY29uZmlnLnVybCkgPz8gXCIvYXBpL3VwbG9hZHRoaW5nXCJ9JHtxdWVyeVBhcmFtc31gO1xufTtcbnZhciBEQU5HRVJPVVNfX3VwbG9hZEZpbGVzID0gYXN5bmMgKGZpbGVzLCBlbmRwb2ludCwgY29uZmlnKSA9PiB7XG4gIGNvbnN0IHMzQ29ubmVjdGlvblJlcyA9IGF3YWl0IGZldGNoKFxuICAgIGNyZWF0ZVJlcXVlc3RQZXJtc1VybCh7IHVybDogY29uZmlnID09IG51bGwgPyB2b2lkIDAgOiBjb25maWcudXJsLCBzbHVnOiBlbmRwb2ludCB9KSxcbiAgICB7XG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICBmaWxlczogZmlsZXMubWFwKChmKSA9PiBmLm5hbWUpXG4gICAgICB9KVxuICAgIH1cbiAgKS50aGVuKChyZXMpID0+IHtcbiAgICBpZiAoIXJlcy5vaylcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIkZhaWxlZCB0byBnZXQgcHJlc2lnbmVkIFVSTHNcIik7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiByZXMuanNvbigpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoZSk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEZhaWxlZCB0byBwYXJzZSByZXNwb25zZSBhcyBKU09OLiBHb3Q6ICR7cmVzLmJvZHl9YCk7XG4gICAgfVxuICB9KTtcbiAgaWYgKCFzM0Nvbm5lY3Rpb25SZXMgfHwgIUFycmF5LmlzQXJyYXkoczNDb25uZWN0aW9uUmVzKSlcbiAgICB0aHJvdyBcIk5vIHVybCByZWNlaXZlZC4gSG93IGRpZCB5b3UgZ2V0IGhlcmU/XCI7XG4gIGNvbnN0IGZpbGVVcGxvYWRQcm9taXNlcyA9IHMzQ29ubmVjdGlvblJlcy5tYXAoYXN5bmMgKHByZXNpZ25lZCkgPT4ge1xuICAgIGNvbnN0IGZpbGUgPSBmaWxlcy5maW5kKChmKSA9PiBmLm5hbWUgPT09IHByZXNpZ25lZC5uYW1lKTtcbiAgICBpZiAoIWZpbGUpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoXCJObyBmaWxlIGZvdW5kIGZvciBwcmVzaWduZWQgVVJMXCIsIHByZXNpZ25lZCk7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJObyBmaWxlIGZvdW5kIGZvciBwcmVzaWduZWQgVVJMXCIpO1xuICAgIH1cbiAgICBjb25zdCB7IHVybCwgZmllbGRzIH0gPSBwcmVzaWduZWQucHJlc2lnbmVkVXJsO1xuICAgIGNvbnN0IGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgaWYgKHByZXNpZ25lZC5maWxlVHlwZSA9PT0gZmlsZS50eXBlLnNwbGl0KFwiL1wiKVswXSB8fCBwcmVzaWduZWQuZmlsZVR5cGUgPT09IGZpbGUudHlwZSkge1xuICAgICAgZm9ybURhdGEuYXBwZW5kKFwiQ29udGVudC1UeXBlXCIsIGZpbGUudHlwZSk7XG4gICAgfSBlbHNlIGlmIChwcmVzaWduZWQuZmlsZVR5cGUgPT09IFwiYmxvYlwiKSB7XG4gICAgICBmb3JtRGF0YS5hcHBlbmQoXCJDb250ZW50LVR5cGVcIiwgXCJhcHBsaWNhdGlvbi9vY3RldC1zdHJlYW1cIik7XG4gICAgfSBlbHNlIGlmIChwcmVzaWduZWQuZmlsZVR5cGUgPT09IFwicGRmXCIpIHtcbiAgICAgIGZvcm1EYXRhLmFwcGVuZChcIkNvbnRlbnQtVHlwZVwiLCBcImFwcGxpY2F0aW9uL3BkZlwiKTtcbiAgICB9XG4gICAgT2JqZWN0LmVudHJpZXMoeyAuLi5maWVsZHMsIGZpbGUgfSkuZm9yRWFjaCgoW2tleSwgdmFsdWVdKSA9PiB7XG4gICAgICBmb3JtRGF0YS5hcHBlbmQoa2V5LCB2YWx1ZSk7XG4gICAgfSk7XG4gICAgY29uc3QgdXBsb2FkID0gYXdhaXQgZmV0Y2godXJsLCB7XG4gICAgICBtZXRob2Q6IFwiUE9TVFwiLFxuICAgICAgYm9keTogZm9ybURhdGEsXG4gICAgICBoZWFkZXJzOiBuZXcgSGVhZGVycyh7XG4gICAgICAgIEFjY2VwdDogXCJhcHBsaWNhdGlvbi94bWxcIlxuICAgICAgfSlcbiAgICB9KTtcbiAgICBpZiAoIXVwbG9hZC5vaylcbiAgICAgIHRocm93IG5ldyBFcnJvcihcIlVwbG9hZCBmYWlsZWQuXCIpO1xuICAgIGNvbnN0IGdlblVybCA9IFwiaHR0cHM6Ly91cGxvYWR0aGluZy5jb20vZi9cIiArIGVuY29kZVVSSUNvbXBvbmVudChmaWVsZHNbXCJrZXlcIl0pO1xuICAgIGF3YWl0IHBvbGxGb3JGaWxlRGF0YShwcmVzaWduZWQua2V5KTtcbiAgICByZXR1cm4ge1xuICAgICAgZmlsZUtleTogcHJlc2lnbmVkLmtleSxcbiAgICAgIGZpbGVVcmw6IGdlblVybFxuICAgIH07XG4gIH0pO1xuICByZXR1cm4gUHJvbWlzZS5hbGwoZmlsZVVwbG9hZFByb21pc2VzKTtcbn07XG52YXIgZ2VuVXBsb2FkZXIgPSAoKSA9PiB7XG4gIHJldHVybiBEQU5HRVJPVVNfX3VwbG9hZEZpbGVzO1xufTtcbnZhciBjbGFzc05hbWVzID0gKC4uLmNsYXNzZXMpID0+IHtcbiAgcmV0dXJuIGNsYXNzZXMuZmlsdGVyKEJvb2xlYW4pLmpvaW4oXCIgXCIpO1xufTtcbnZhciBnZW5lcmF0ZU1pbWVUeXBlcyA9IChmaWxlVHlwZXMpID0+IHtcbiAgY29uc3QgYWNjZXB0ZWQgPSBmaWxlVHlwZXMubWFwKCh0eXBlKSA9PiB7XG4gICAgaWYgKHR5cGUgPT09IFwiYmxvYlwiKVxuICAgICAgcmV0dXJuIFwiYmxvYlwiO1xuICAgIGlmICh0eXBlID09PSBcInBkZlwiKVxuICAgICAgcmV0dXJuIFwiYXBwbGljYXRpb24vcGRmXCI7XG4gICAgZWxzZVxuICAgICAgcmV0dXJuIGAke3R5cGV9LypgO1xuICB9KTtcbiAgaWYgKGFjY2VwdGVkLmluY2x1ZGVzKFwiYmxvYlwiKSkge1xuICAgIHJldHVybiB2b2lkIDA7XG4gIH1cbiAgcmV0dXJuIGFjY2VwdGVkO1xufTtcbnZhciBnZW5lcmF0ZUNsaWVudERyb3B6b25lQWNjZXB0ID0gKGZpbGVUeXBlcykgPT4ge1xuICBjb25zdCBtaW1lVHlwZXMgPSBnZW5lcmF0ZU1pbWVUeXBlcyhmaWxlVHlwZXMpO1xuICBpZiAoIW1pbWVUeXBlcylcbiAgICByZXR1cm4gdm9pZCAwO1xuICByZXR1cm4gT2JqZWN0LmZyb21FbnRyaWVzKG1pbWVUeXBlcy5tYXAoKHR5cGUpID0+IFt0eXBlLCBbXV0pKTtcbn07XG5leHBvcnQge1xuICBEQU5HRVJPVVNfX3VwbG9hZEZpbGVzLFxuICBjbGFzc05hbWVzLFxuICBnZW5VcGxvYWRlcixcbiAgZ2VuZXJhdGVDbGllbnREcm9wem9uZUFjY2VwdCxcbiAgZ2VuZXJhdGVNaW1lVHlwZXNcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jbGllbnQubWpzLm1hcCJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/uploadthing/dist/client.mjs\n");

/***/ })

};
;